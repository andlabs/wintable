// 27 february 2015

import "unknwn.idl";
import "stdint.h";
import "oaidl.idl";

// UUIDs were generated with uuidgen from util-linux 2.25.1 on Ubuntu GNOME 14.10 on 6 March 2015

// TODO make sure all parameter attributes are correct

// table model column types
enum {
	tableModelColumnInvalid,
	tableModelColumnString,
	tableModelColumnImage,
	tableModelColumnBool,
	tableModelColumnARGBColor,
};

// tableARGBColor is an explicit type name for an ARGB color.
// Each color component is 8 bits wide, with A in the most significant bits, then R, then G, and then B in the least significant bits.
// Colors are assumed to be alpha-premultiplied.
// tableARGB() and tableRGBA() produce tableARGBColors from the given component values, specified in the order in the macros.
typedef uint32_t tableARGBColor;
// TODO
// TODO have a ; at the end?
cpp_quote("#define tableARGB(a, r, g, b) ((tableARGBColor) (a) << 24) | ((tableARGBColor) (r) << 16) | ((tableARGBColor) (b) << 8) | (tableARGBColor) (b))")
cpp_quote("#define tableRGBA(r, g, b, a) tableARGB((a), (r), (g), (b))")

// tableModel::tableNotify() notifications
enum {
	// row - index of added row
	// column - ignored
	tableModelNotifyRowAdded,
	// row - index of deleted row
	// column - ignored
	tableModelNotifyRowDeleted,
	// row - index of changed row
	// column - index of changed column
	tableModelNotifyCellChanged,
};

typedef struct {
	int code;
	intmax_t row;
	intmax_t column;
} tableModelNotificationParams;

typedef union switch (int type) {
case tableModelColumnInvalid:
	;			// userSTGMEDIUM in Microsoft's objidl.idl says to do this for empty values
case tableModelColumnString:
	BSTR *stringVal;
case tableModelColumnImage:
	;
case tableModelColumnBool:
	BOOL boolVal;
case tableModelColumnARGBColor:
	tableARGBColor color;
} tableCellValue;

// tableModel errors
cpp_quote("#define tableModelErrorTableAlreadySubscribed MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x200)")
cpp_quote("#define tableModelErrorTableNotSubscribed MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x201)")
cpp_quote("#define tableModelErrorWrongColumnType MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x202)")

// tableModel is the interface that any COM object that wishes
// to provide data to a Table must implement. The methods of
// tableModel are specifically intended to drive a Table; they are
// not intended to be (and indeed, cannot be used to) provide
// data to the model in any other context.
// 
// Table itself assumes the model is an in-process, STA object.
// TODO keep local?
[object, local, uuid(8f361d46-caab-489f-8d20-aeaaeaa9104f)]
interface tableModel : IUnknown {
	// tableSubscribe() adds the Table with the given window
	// handle to a list of Tables to notify of any changes to the
	// tableModel. It is called by the Table itself when you issue
	// a tableSetModel message; you do not need to invoke
	// this method directly yourself.
	// 
	// It should neither take a reference to the tableModel nor
	// assume that one has been taken beforehand/will be taken
	// afterward; the Table will do that itself.
	// 
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_INVALIDARG if hwnd is NULL
	// - E_OUTOFMEMORY if a memory allocation failed
	// - tableModelErrorTableAlreadySubscribed if the given
	//     Table is already subscribed
	// 
	// You may use the tableSubscribtions system provided by
	// this DLL to implement this method for you. These functions
	// perform all necessary error checking; you can implement
	// your tableSubscribe() by merely calling this function.
	// TODO should this check if hwnd is actually a Table?
	HRESULT tableSubscribe(
		[in] HWND hwnd
	);

	// tableUnsubscribe() removes the Table with the given
	// window handle from a list of Tables to notify of any
	// changes to the tableModel. It is called by the Table itself
	// when you issue a tableSetModel message or when the
	// Table is destroyed; you do not need to invoke this method
	// directly yourself.
	// 
	// It should neither release a reference to the tableModel nor
	// assume that one has been released beforehand/will be
	// released afterward; the Table will do that itself.
	// 
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_INVALIDARG if hwnd is NULL
	// - tableModelErrorTableNotSubscribed if the given Table is
	//     not subscribed
	// 
	// You may use the tableSubscribtions system provided by
	// this DLL to implement this method for you. These functions
	// perform all necessary error checking; you can implement
	// your tableUnsubscribe() by merely calling this function.
	HRESULT tableUnsubscribe(
		[in] HWND hwnd
	);

	// tableNotify() notifies all the Tables currently subscribed
	// to the tableModel that something about the tableModel
	// has changed. It should send a tableModelNotification
	// message to each Table with the LPARAM set to the given
	// tableModelNotificationParams pointer. If no Tables are
	// currently subscribed, this function does nothing.
	// 
	// You may use the tableSubscribtions system provided by
	// this DLL to implement this method for you.
	// TODO return an error?
	void tableNotify(
		[in] tableModelNotificationParams *p
	);

	// tableColumnCount() returns the number of columns in
	// the tableModel. This value should be a constant; it should
	// never change after object creation.
	// (TODO would this go against CoCreateInstance()? maybe "after the first subscription" instead?)
	intmax_t tableColumnCount(void);

	// tableColumnType() returns the data type for a given column.
	// This should be one of the tableColumnXxxx constants.
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_POINTER if colType is NULL
	// - E_INVALIDARG if column is out of range
	// On failure, *colType is set to tableModelColumnInvalid;
	// on success, *colType is set to anything else.
	// The value of *colType on success should be a constant;
	// it should never change after object creation.
	// (TODO would this go against CoCreateInstance()? maybe "after the first subscription" instead?)
	HRESULT tableColumnType(
		[in] intmax_t column,
		[out, retval] int *colType
	);

	// tableRowCount() returns the number of rows in the tableModel.
	// TODO HRESULT?
	intmax_t tableRowCount(void);

	// tableCellValue() returns the value of a given tableModel cell.
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_POINTER if value is NULL
	// - E_INVALIDARG if row or column is out of range
	// On failure, value->type will be set to tableModelColumnInvalid.
	// On success, value->type will be set to the column
	// type and the appropriate field for that type will be
	// set to the actual value.
	// TODO image cells
	HRESULT tableCellValue(
		[in] intmax_t row,
		[in] intmax_t column,
		[out, retval] tableCellValue *value
	);

	// tableDrawImageCell() draws the image belonging to the
	// given cell into the given HDC. The image shall be resized
	// to fit the given rectangle.
	// 
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_INVALIDARG if row or column is out of range
	//     or if the given HDC is NULL
	// - E_POINTER if the given destination rectangle is NULL
	// - tableModelErrorWrongColumnType if the given column
	//     is not of type tableModelColumnImage
	// - HRESULT_FROM_WIN32(GetLastError()) if a Windows
	//     API function that returns a last error code fails
	// 
	// You may use the tableDrawImageCell() function provided by
	// this DLL to implement this method for you. Be aware that
	// this function expects images to be 32-bit alpha-premultiplied
	// ARGB bitmaps (TODO DIB setions?) as expected by the
	// Windows API AlphaBlend() function. (TODO what errors are already provided?)
	HRESULT tableDrawImageCell(
		[in] intmax_t row,
		[in] intmax_t column,
		[in] HDC hdc,
		[in] RECT *rDest
	);

	// tableIsColumnMutable returns S_OK if the given column
	// is mutable, S_FALSE if not, and E_INVALIDARG if an invalid
	// column number is specified. The value returned on success
	// should be a constant; it should never change after object
	// creation.
	// TODO really not just a simple bool?
	HRESULT tableIsColumnMutable(
		[in] intptr_t column
	);

	// TODO document
	HRESULT tableSetCellValue(
		[in] intmax_t row,
		[in] intmax_t column,
		[in] tableCellValue data
	);

	// TODO document
	HRESULT tableCellToggleBool(
		[in] intmax_t row,
		[in] intmax_t column
	);
}

// TODO
// - tableModelErrorColumnNotMutable

// TODO trees?
// TODO E_HANDLE for NULL HWNDs and HDCs instead of E_POINTER or E_INVALIDARG?
// TODO invalid windows other than NULL?
// TODO allow methods to return any other errors where appropriate
// TODO forbid E_NOTIMPL?
