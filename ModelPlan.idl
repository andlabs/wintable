// 27 february 2015

import "unknwn.idl";
import "stdint.h";
import "oaidl.idl";

// UUIDs were generated with uuidgen from util-linux 2.25.1 on Ubuntu GNOME 14.10 on 6 March 2015

// TODO make sure all parameter attributes are correct

// tableModel::tableNotify() notifications
enum {
	// row - index of added row
	// column - ignored
	tableModelNotifyRowAdded,
	// row - index of deleted row
	// column - ignored
	tableModelNotifyRowDeleted,
	// row - index of changed row
	// column - index of changed column
	tableModelNotifyCellChanged,
	// TODO others?
}

// tableModel is the interface that any COM object that wishes to provide data to a Table must implement.
// Table itself assumes the model is an in-process, STA object.
// TODO keep local?
// TODO the UUID was generated with uuidgen with no arguments; I have /dev/random and /dev/urandom but make sure uuidgen ran with -r anyway
[object, local, uuid(8f361d46-caab-489f-8d20-aeaaeaa9104f)]
interface tableModel : IUnknown {
	// tableSubscribe() adds the Table with the given window
	// handle to a list of Tables to notify of any changes to the
	// tableModel. It is called by the Table itself when you issue
	// a tableSetModel message; you do not need to invoke
	// this method directly yourself.
	// 
	// It should neither take a reference to the tableModel nor
	// assume that one has been taken beforehand/will be taken
	// afterward; the Table will do that itself.
	// 
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_INVALIDARG if hwnd is NULL or HWND_BROADCAST
	// - E_OUTOFMEMORY if a memory allocation failed
	// 
	// You may use the tableSubscribtions system provided by
	// this DLL to implement this method for you.
	// TODO should this check if hwnd is actually a Table?
	HRESULT tableSubscribe(
		[in] HWND hwnd
	);

	// tableUnsubscribe() removes the Table with the given
	// window handle from a list of Tables to notify of any
	// changes to the tableModel. It is called by the Table itself
	// when you issue a tableSetModel message or when the
	// Table is destroyed; you do not need to invoke this method
	// directly yourself.
	// 
	// It should neither release a reference to the tableModel nor
	// assume that one has been released beforehand/will be
	// released afterward; the Table will do that itself.
	// 
	// It should return S_OK on success or a COM error code
	// on failure; in particular, it should return:
	// - E_INVALIDARG if hwnd is NULL or HWND_BROADCAST
	// 
	// You may use the tableSubscribtions system provided by
	// this DLL to implement this method for you.
	// TODO what error for not already subscribed
	HRESULT tableUnsubscribe(
		[in] HWND hwnd
	);

	// TODO document
	// TODO return an error?
	void tableNotify(
		[in] int notification,			// TODO int?
		[in] intmax_t row,
		[in] intmax_t column
	);

	// tableColumnCount() returns the number of columns in
	// the tableModel. This value should be a constant; it should
	// never change after object creation.
	// (TODO would this go against CoCreateInstance()? maybe "after the first subscription" instead?)
	intmax_t tableColumnCount(void);

	// tableColumnType() returns the data type for a given column.
	// This should be one of the tableColumnXxxx constants.
	// It should return S_OK on success or a COM error code on failure; in particular, it should return:
	// - E_POINTER if colType is NULL
	// - E_INVALIDARG if column is out of range
	// The value of *colType on return should be a constant; it should never change after object creation.
	// (TODO would this go against CoCreateInstance()? maybe "after the first subscription" instead?)
	// TODO annotation for colType?
	// TODO value of *colType on error?
	HRESULT tableColumnType(
		[in] intmax_t column,
		[out, retval] int *colType
	);

	// tableRowCount() returns the number of rows in the tableModel.
	intmax_t tableRowCount(void);

	// TODO document
	HRESULT tableCellValue(
		[in] intmax_t row,
		[in] intmax_t column,
		[out, retval] VARIANT *data
	);
}

// tableMutableModel is the interface that any COM object that wishes to provide data to a Table that can be changed by the Table itself must implement.
// TODO keep local?
// TODO document that all methods call tableNotify()
[object, local, uuid(459d0d7e-bd48-41bb-89e2-2782d8d902f2)]
interface tableMutableModel : tableModel {
	// tableIsColumnMutable returns S_OK if the given column is mutable, S_FALSE if not, and E_INVALIDARG if an invalid column number is specified.
	// The value returned should be a constant; it should never change after object creation.
	// TODO really not just a simple bool?
	HRESULT tableIsColumnMutable(
		[in] intptr_t column
	);

	// TODO document
	HRESULT tableSetCellValue(
		[in] intmax_t row,
		[in] intmax_t column,
		[in] VARIANT *data		// TODO pointer?
	);

	// TODO document
	// TODO really not just a simple bool?
	HRESULT tableCanManipulateRows(void);

	// TODO document
	HRESULT tableAppendRow(
		[out, retval] intmax_t *rowNumber
	);

	// TODO insert row

	// TODO document
	HRESULT tableDeleteRow(
		[in] intmax_t rowNumber,
	);
}

// TODO see if there's a standard COM error for:
// - wrong variant type
// TODO tableMutableModel errors:
// - tableMutableModelErrorColumnNotMutable
// - tableMutableModelErrorCannotManipulateRows

// TODO trees?
